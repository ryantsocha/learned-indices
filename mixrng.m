function [array] = mixrng(prop1, mu1, var1, prop2, mu2, var2, prop3, mu3, var3, n)
% function [array] = mixrng(mu1, var1, mu2, var2, mu3, var3, n)
% This function generates a column vector of points sampled from a mixture 
% of three Gaussians with the specified means and variances, 
% according to the specified proportions.
% The proportions ought to be input as numbers between 0 and 1 that
% sum to 1.

% TODO: make it so that I'm directly generating the elements randomly
% rather than creating three arrays, concatenating them, and then
% randomizing?

% TODO: make flexible so that it's easier to change number of Gaussians in
% mixture.

% TODO: currently using the floor function for the third argument to the
% individual random distributions, which might cause less than n numbers
% total to be generated by the array.

A = normrnd(mu1,var1,floor(n*prop1),1); % using 1 as last argument is necessary 
                                 % to make a column vector, if no
                                 % arg used then is a square n by n matrix
B = normrnd(mu2,var2,floor(n*prop2),1);
C = normrnd(mu3,var3,floor(n*prop3),1);

temp = [A;B;C];
array = temp(randperm(length(temp)));
